#!/usr/bin/env python
""" Front end to interact with github manually """

import os
import sys
import logging
import argparse
import json

import chatter.bot

def set_status(args, context, descriptions):
    """ Set a generic status """
    state = args.state
    sha = args.sha

    if sha is None:
        logging.error("""No commit hash available. Either pass a hash
                via --sha, or set the environment variable
                'ghprbActualCommit'.""")
        sys.exit(1)

    if args.description is not None:
        description = args.description
    else:
        description = descriptions[state]

    status = {'context': context, 'state': state, 'description': description}

    if args.url is not None:
        status['target_url'] = args.url

    bot = chatter.bot.JenkinsBot(args.token).set_status(sha, status)

def build(args):
    """ Set build status based on args """
    descriptions = {
            'success': "Build succeeded.",
            'failure': "Build failed.",
            'error': "There was an error building.",
            'pending': "Build results pending."}
    set_status(args, 'build', descriptions)

def tests(args):
    """ Set tests status based on args """
    descriptions = {
            'success': "All tests passed.",
            'failure': "Some tests failed.",
            'error': "There was an error testing.",
            'pending': "Test results pending."}
    set_status(args, 'tests', descriptions)

def code_review(args):
    """ Set code review status based on args """
    descriptions = {
        'success': "Code review completed.",
        'failure': "Code was rejected by review.",
        'error': "There was an error reviewing code?",
        'pending': "Code review pending."}

    if args.state == 'query':
        # Query the github server for the code review state
        if args.pr is None:
            logging.error("""No pull request number available. Either
                pass a pull request via --pr, or set the environment
                variable 'ghprbPullId'.""")
            sys.exit(1)

        logging.info('Pull request sha: {}'.format(args.sha))
        bot = chatter.bot.JenkinsBot(args.token)
        comment, args.sha = bot.pr_reviewed_by(args.pr)

        if comment is not None:
            args.state = 'success'
            descriptions[args.state] = 'Code review completed by @{}'.format(comment['user']['login'])
            logging.info(descriptions[args.state])
        else:
            args.state = 'pending'

    set_status(args, 'code_review', descriptions)

def comment(args):
    if args.pr is None:
        logging.error("""No commit hash available. Either pass a
                pull request via --pr, or set the environment
                variable 'ghprbPullId'.""")
        sys.exit(1)
    chatter.bot.JenkinsBot(args.token).post_comment(args.pr, args.body)

def main():
    """ Main function """
    logging.basicConfig(level=logging.DEBUG)

    if os.environ.get('ghprbActualCommit') is not None:
        default_sha = os.environ.get('ghprbActualCommit')
    elif os.environ.get('GIT_COMMIT') is not None:
        default_sha = os.environ.get('GIT_COMMIT')
    else:
        default_sha = None

    parser = argparse.ArgumentParser()
    parser.add_argument("--sha", default=default_sha,
            help="SHA hash of the commit for which to set status")
    parser.add_argument("--pr", help="Pull request number to comment on",
        default=os.environ.get('ghprbPullId'))
    parser.add_argument("--url", help="URL to link to this update",
        default=os.environ.get('JOB_URL'))
    parser.add_argument("--token", help="Token to use for authentication",
        default=os.environ.get('GITHUB_AUTH_TOKEN'))
    parser.add_argument("--description", help="Description of status update")
    subparsers = parser.add_subparsers(help="commands")

    # Parser to set code review status
    code_review_parser = subparsers.add_parser("codereview",
            help="Check if code review has been completed")
    code_review_parser.set_defaults(command=code_review)
    code_review_parser.add_argument("state", help="State to set",
            choices=['query', 'success', 'pending', 'error', 'failure'])

    # Parser to set build status
    build_parser = subparsers.add_parser("build",
            help="Set build check status")
    build_parser.set_defaults(command=build)
    build_parser.add_argument("state", help="State to set",
            choices=['success', 'pending', 'error', 'failure'])

    # Parser to set test status
    tests_parser = subparsers.add_parser("tests",
            help="Set tests check status")
    tests_parser.set_defaults(command=tests)
    tests_parser.add_argument("state", help="State to set",
            choices=['success', 'pending', 'error', 'failure'])

    comment_parser = subparsers.add_parser("comment",
            help="Post a comment to the pull request")
    comment_parser.set_defaults(command=comment)
    comment_parser.add_argument("body", help="String to post")

    args = parser.parse_args()

    if args.token is None:
        logging.error("No authorization token supplied; please set"
                "environment variable GITHUB_AUTH_TOKEN")
        sys.exit(1)

    args.command(args)

if __name__ == '__main__':
    main()
